# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.attribute import Attribute  # noqa: F401,E501
from swagger_server import util


class GeneInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, gene_id: str=None, attributes: List[Attribute]=None):  # noqa: E501
        """GeneInfo - a model defined in Swagger

        :param gene_id: The gene_id of this GeneInfo.  # noqa: E501
        :type gene_id: str
        :param attributes: The attributes of this GeneInfo.  # noqa: E501
        :type attributes: List[Attribute]
        """
        self.swagger_types = {
            'gene_id': str,
            'attributes': List[Attribute]
        }

        self.attribute_map = {
            'gene_id': 'gene_id',
            'attributes': 'attributes'
        }

        self._gene_id = gene_id
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'GeneInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gene_info of this GeneInfo.  # noqa: E501
        :rtype: GeneInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gene_id(self) -> str:
        """Gets the gene_id of this GeneInfo.


        :return: The gene_id of this GeneInfo.
        :rtype: str
        """
        return self._gene_id

    @gene_id.setter
    def gene_id(self, gene_id: str):
        """Sets the gene_id of this GeneInfo.


        :param gene_id: The gene_id of this GeneInfo.
        :type gene_id: str
        """
        if gene_id is None:
            raise ValueError("Invalid value for `gene_id`, must not be `None`")  # noqa: E501

        self._gene_id = gene_id

    @property
    def attributes(self) -> List[Attribute]:
        """Gets the attributes of this GeneInfo.


        :return: The attributes of this GeneInfo.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: List[Attribute]):
        """Sets the attributes of this GeneInfo.


        :param attributes: The attributes of this GeneInfo.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes
