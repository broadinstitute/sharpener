# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, default: str=None, allowed_values: List[str]=None):  # noqa: E501
        """Parameter - a model defined in Swagger

        :param name: The name of this Parameter.  # noqa: E501
        :type name: str
        :param type: The type of this Parameter.  # noqa: E501
        :type type: str
        :param default: The default of this Parameter.  # noqa: E501
        :type default: str
        :param allowed_values: The allowed_values of this Parameter.  # noqa: E501
        :type allowed_values: List[str]
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'default': str,
            'allowed_values': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'default': 'default',
            'allowed_values': 'allowed_values'
        }

        self._name = name
        self._type = type
        self._default = default
        self._allowed_values = allowed_values

    @classmethod
    def from_dict(cls, dikt) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The parameter of this Parameter.  # noqa: E501
        :rtype: Parameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Parameter.


        :return: The name of this Parameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Parameter.


        :param name: The name of this Parameter.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Parameter.

        type of a parameter, one of Boolean, int, double, string  # noqa: E501

        :return: The type of this Parameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Parameter.

        type of a parameter, one of Boolean, int, double, string  # noqa: E501

        :param type: The type of this Parameter.
        :type type: str
        """

        self._type = type

    @property
    def default(self) -> str:
        """Gets the default of this Parameter.


        :return: The default of this Parameter.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default: str):
        """Sets the default of this Parameter.


        :param default: The default of this Parameter.
        :type default: str
        """

        self._default = default

    @property
    def allowed_values(self) -> List[str]:
        """Gets the allowed_values of this Parameter.


        :return: The allowed_values of this Parameter.
        :rtype: List[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values: List[str]):
        """Sets the allowed_values of this Parameter.


        :param allowed_values: The allowed_values of this Parameter.
        :type allowed_values: List[str]
        """

        self._allowed_values = allowed_values
