# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.parameter import Parameter  # noqa: F401,E501
from swagger_server import util


class TransformerInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, function: str=None, parameters: List[Parameter]=None):  # noqa: E501
        """TransformerInfo - a model defined in Swagger

        :param name: The name of this TransformerInfo.  # noqa: E501
        :type name: str
        :param function: The function of this TransformerInfo.  # noqa: E501
        :type function: str
        :param parameters: The parameters of this TransformerInfo.  # noqa: E501
        :type parameters: List[Parameter]
        """
        self.swagger_types = {
            'name': str,
            'function': str,
            'parameters': List[Parameter]
        }

        self.attribute_map = {
            'name': 'name',
            'function': 'function',
            'parameters': 'parameters'
        }

        self._name = name
        self._function = function
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'TransformerInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transformer_info of this TransformerInfo.  # noqa: E501
        :rtype: TransformerInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this TransformerInfo.


        :return: The name of this TransformerInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TransformerInfo.


        :param name: The name of this TransformerInfo.
        :type name: str
        """

        self._name = name

    @property
    def function(self) -> str:
        """Gets the function of this TransformerInfo.


        :return: The function of this TransformerInfo.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function: str):
        """Sets the function of this TransformerInfo.


        :param function: The function of this TransformerInfo.
        :type function: str
        """

        self._function = function

    @property
    def parameters(self) -> List[Parameter]:
        """Gets the parameters of this TransformerInfo.


        :return: The parameters of this TransformerInfo.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[Parameter]):
        """Sets the parameters of this TransformerInfo.


        :param parameters: The parameters of this TransformerInfo.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters
