# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_property import ModelProperty  # noqa: F401,E501
from swagger_server import util


class TransformerQuery(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, gene_list_id: str=None, controls: List[ModelProperty]=None):  # noqa: E501
        """TransformerQuery - a model defined in Swagger

        :param name: The name of this TransformerQuery.  # noqa: E501
        :type name: str
        :param gene_list_id: The gene_list_id of this TransformerQuery.  # noqa: E501
        :type gene_list_id: str
        :param controls: The controls of this TransformerQuery.  # noqa: E501
        :type controls: List[ModelProperty]
        """
        self.swagger_types = {
            'name': str,
            'gene_list_id': str,
            'controls': List[ModelProperty]
        }

        self.attribute_map = {
            'name': 'name',
            'gene_list_id': 'gene_list_id',
            'controls': 'controls'
        }

        self._name = name
        self._gene_list_id = gene_list_id
        self._controls = controls

    @classmethod
    def from_dict(cls, dikt) -> 'TransformerQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transformer_query of this TransformerQuery.  # noqa: E501
        :rtype: TransformerQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this TransformerQuery.


        :return: The name of this TransformerQuery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TransformerQuery.


        :param name: The name of this TransformerQuery.
        :type name: str
        """

        self._name = name

    @property
    def gene_list_id(self) -> str:
        """Gets the gene_list_id of this TransformerQuery.


        :return: The gene_list_id of this TransformerQuery.
        :rtype: str
        """
        return self._gene_list_id

    @gene_list_id.setter
    def gene_list_id(self, gene_list_id: str):
        """Sets the gene_list_id of this TransformerQuery.


        :param gene_list_id: The gene_list_id of this TransformerQuery.
        :type gene_list_id: str
        """

        self._gene_list_id = gene_list_id

    @property
    def controls(self) -> List[ModelProperty]:
        """Gets the controls of this TransformerQuery.


        :return: The controls of this TransformerQuery.
        :rtype: List[ModelProperty]
        """
        return self._controls

    @controls.setter
    def controls(self, controls: List[ModelProperty]):
        """Sets the controls of this TransformerQuery.


        :param controls: The controls of this TransformerQuery.
        :type controls: List[ModelProperty]
        """

        self._controls = controls
